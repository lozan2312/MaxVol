{"version":3,"sources":["../src/importLocale.js"],"names":["toMomentLocale","DEFAULT_FALLBACK_LOCALE","importLocale","locale","unknownLocaleCallback","normalizedLocale","isKnown","promise","Promise","resolve"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,SAASC,uBAAT,QAAwC,gBAAxC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,wBAA8BC,YAA9B;AAAA;AAAA;;;oCAAe,WACbC,MADa,EAEbC,qBAAqB,GAAG,KAAK,CAFhB,EAGb;AACA,UAAM,CAACC,gBAAD,EAAmBC,OAAnB,IAA8BN,cAAc,CAACG,MAAD,CAAlD;AACA,QAAII,OAAO,GAAGC,OAAO,CAACC,OAAR,EAAd;;AACA,QAAIH,OAAJ,EAAa;AACX,UAAID,gBAAgB,KAAKJ,uBAAzB,EAAkD;AAChDM,QAAAA,OAAO,GAAG,OAAQ,iBAAgBF,gBAAiB,EAAzC,CAAV;AACD,OAFD,MAEO,CACL;AACA;AACD;AACF,KAPD,MAOO;AACL,aAAOD,qBAAP,KAAiC,UAAjC,IACEA,qBAAqB,CAACC,gBAAD,EAAmBF,MAAnB,CADvB;AAED;;AACD,UAAMI,OAAN;AACA,WAAOF,gBAAP;AACD,G","sourcesContent":["/*\n * Copyright (c) 2021 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport toMomentLocale from \"./toMomentLocale\";\nimport { DEFAULT_FALLBACK_LOCALE } from \"../res/locales\";\n\n/**\n * Imports a Moment locale asynchronously (using dynamic imports).\n *\n * @param {string|*} locale The locale to import. A value which is not a string may be passed and it will be normalized to an empty string\n *                          which will be treated as an unknown locale resolving to the Moment's default locale (USA's English, i.e. \"en\").\n * @param {(normalizedLocale: string, locale: string|*) => *} [unknownLocaleCallback] A callback called with the Moment's default locale (USA's English, i.e. \"en\")\n *                                                                                    if the given locale is unknown as its first parameter and the given unknown locale\n *                                                                                    as its second parameter.\n *                                                                                    This callback will be called only when the given locale is not a locale\n *                                                                                    known to Moment and it's not the Moment's default locale (USA's English, i.e. \"en\").\n *                                                                                    If a locale is unknown, the callback is called before resolving\n *                                                                                    the returned promise and the promise will resolve with the Moment's default locale\n *                                                                                    (USA's English, i.e. \"en\").\n * @return {Promise} A promise which, if fulfilled, resolves with the normalized locale when the given locale has been imported\n *                   successfully or rejects with an error if the given locale cannot be imported\n *                   (e.g. the locale chunk filename is not found or there is a network error).\n *                   If the locale is unknown, then the returned promise doesn't reject.\n */\nexport default async function importLocale(\n  locale,\n  unknownLocaleCallback = void 0\n) {\n  const [normalizedLocale, isKnown] = toMomentLocale(locale);\n  let promise = Promise.resolve();\n  if (isKnown) {\n    if (normalizedLocale !== DEFAULT_FALLBACK_LOCALE) {\n      promise = import(`moment/locale/${normalizedLocale}`);\n    } else {\n      // Moment does not bundle its default locale in a separate file,\n      // so there's nothing to do here.\n    }\n  } else {\n    typeof unknownLocaleCallback === \"function\" &&\n      unknownLocaleCallback(normalizedLocale, locale);\n  }\n  await promise;\n  return normalizedLocale;\n}\n"],"file":"importLocale.js"}