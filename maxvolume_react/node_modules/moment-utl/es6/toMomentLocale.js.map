{"version":3,"sources":["../src/toMomentLocale.js"],"names":["allSupportedLocalesMap","DEFAULT_FALLBACK_LOCALE","NORMALIZED_LOCALE_DESIGNATORS_SEPARATOR","normalizeLocale","locale","replace","toLowerCase","toMomentLocale","normalizedLocale","defaultNormalizedLocale","localesToTry","split","allLocalesMap","localeToTry"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,sBAAP,MAAmC,0BAAnC;AACA,SAASC,uBAAT,QAAwC,gBAAxC;AAEA;AACA;AACA;;AACA,MAAMC,uCAAuC,GAAG,GAAhD;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,eAAe,GAAIC,MAAD,IACtBA,MAAM,CAACC,OAAP,CAAe,GAAf,EAAoBH,uCAApB,EAA6DI,WAA7D,EADF;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASC,cAAT,CAAwBH,MAAxB,EAAgC;AAC7C,QAAMI,gBAAgB,GAAGL,eAAe,CACtC,OAAOC,MAAP,KAAkB,QAAlB,GAA6B,EAA7B,GAAkCA,MADI,CAAxC;AAGA,QAAMK,uBAAuB,GAAGR,uBAAhC;AACA,QAAMS,YAAY,GAAG,CACnBF,gBADmB,EAEnBA,gBAAgB,CAACG,KAAjB,CAAuBT,uCAAvB,EAAgE,CAAhE,CAFmB,CAArB;;AAIA,QAAMU,aAAa,mCACdZ,sBAAsB,EADR;AAEjB;AACA;AACA,KAACS,uBAAD,GAA2B,CAAC,CAJX;AAKjB,KAACA,uBAAuB,CAACE,KAAxB,CACCT,uCADD,EAEC,CAFD,CAAD,GAEO,CAAC;AAPS,IAAnB;;AASA,OAAK,MAAMW,WAAX,IAA0BH,YAA1B,EAAwC;AACtC,QAAI,OAAOE,aAAa,CAACC,WAAD,CAApB,KAAsC,WAA1C,EAAuD;AACrD,aAAO,CAACA,WAAD,EAAc,IAAd,CAAP;AACD;AACF;;AACD,SAAO,CAACJ,uBAAD,EAA0B,KAA1B,CAAP;AACD","sourcesContent":["/*\n * Copyright (c) 2021 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport allSupportedLocalesMap from \"./allSupportedLocalesMap\";\nimport { DEFAULT_FALLBACK_LOCALE } from \"../res/locales\";\n\n/**\n * @type {string}\n */\nconst NORMALIZED_LOCALE_DESIGNATORS_SEPARATOR = \"-\";\n\n/**\n * Normalizes a locale.\n *\n * @param {string} locale The locale.\n * @return {string} The normalized locale.\n */\nconst normalizeLocale = (locale) =>\n  locale.replace(\"_\", NORMALIZED_LOCALE_DESIGNATORS_SEPARATOR).toLowerCase();\n\n/**\n * Converts a string representing a locale to a Moment locale.\n *\n * This function reformats an incoming locale (e.g. \"ar_KW\" to \"ar-kw\")\n * checking if it's supported by Moment and falling back to language code only (e.g. \"ar\"),\n * then falling back to the Moment's default locale (USA's English, i.e. \"en\").\n *\n * @param {string|*} locale A string representing a locale. A value which is not a string may be passed and it will be normalized to an empty string\n *                          and the returned locale will be the Moment's default locale (USA's English, i.e. \"en\").\n * @return {Array} A tuple where the first element is a string containing the normalized\n *                 Moment locale for the given \"locale\" parameter and the second element\n *                 is a boolean indicating whether the locale is known or not\n *                 (if \"true\", the given locale is known and was looked up; if \"false\",\n *                 it means that the given locale was not looked up and is unknown).\n *                 When the given locale is unknown, the returned array will contain\n *                 the Moment's default locale as its first element (USA's English, i.e. \"en\").\n */\nexport default function toMomentLocale(locale) {\n  const normalizedLocale = normalizeLocale(\n    typeof locale !== \"string\" ? \"\" : locale\n  );\n  const defaultNormalizedLocale = DEFAULT_FALLBACK_LOCALE;\n  const localesToTry = [\n    normalizedLocale,\n    normalizedLocale.split(NORMALIZED_LOCALE_DESIGNATORS_SEPARATOR)[0],\n  ];\n  const allLocalesMap = {\n    ...allSupportedLocalesMap(),\n    // Using -1 as values here, but, really, any value which is not \"undefined\"\n    // would be OK in this case, because the value of the map is not used.\n    [defaultNormalizedLocale]: -1,\n    [defaultNormalizedLocale.split(\n      NORMALIZED_LOCALE_DESIGNATORS_SEPARATOR\n    )[0]]: -1,\n  };\n  for (const localeToTry of localesToTry) {\n    if (typeof allLocalesMap[localeToTry] !== \"undefined\") {\n      return [localeToTry, true];\n    }\n  }\n  return [defaultNormalizedLocale, false];\n}\n"],"file":"toMomentLocale.js"}