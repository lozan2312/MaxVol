{"version":3,"sources":["../../../src/modules/hash.js"],"names":["stringHashArray","array","code","i","length","n","j","charCodeAt","hashString","str","hash","chr","onePassStringHash","nextHash"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,eAAT,CAAyBC,KAAzB,EAAgC;AACrC,MAAIC,IAAI,GAAG,CAAX;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,QAAIE,CAAC,GAAG,CAAR;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACE,CAAD,CAAL,CAASC,MAA7B,EAAqCE,CAAC,EAAtC,EAA0C;AACxCD,MAAAA,CAAC,GAAIA,CAAC,GAAG,GAAL,GAAYJ,KAAK,CAACE,CAAD,CAAL,CAASI,UAAT,CAAoBD,CAApB,CAAhB;AACD;;AACDJ,IAAAA,IAAI,IAAIG,CAAR;AACD;;AACD,SAAOH,IAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMM,UAAU,GAAGC,GAAG,IAAI;AAC/B,MAAIC,IAAI,GAAG,CAAX;AAAA,MACEP,CADF;AAAA,MAEEQ,GAFF;;AAGA,MAAIF,GAAG,CAACL,MAAJ,KAAe,CAAnB,EAAsB;AACpB,WAAOM,IAAP;AACD;;AACD,OAAKP,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGM,GAAG,CAACL,MAApB,EAA4BD,CAAC,EAA7B,EAAiC;AAC/BQ,IAAAA,GAAG,GAAGF,GAAG,CAACF,UAAJ,CAAeJ,CAAf,CAAN;AACAO,IAAAA,IAAI,GAAG,CAACA,IAAI,IAAI,CAAT,IAAcA,IAAd,GAAqBC,GAA5B;AACAD,IAAAA,IAAI,IAAI,CAAR,CAH+B,CAGpB;AACZ;;AACD,SAAOA,IAAP;AACD,CAbM;AAeP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,iBAAT,CAA2BH,GAA3B,EAAgCC,IAAI,GAAG,CAAvC,EAA0C;AAC/C,MAAIG,QAAQ,GAAGH,IAAf;AACA,MAAIL,CAAC,GAAG,CAAR;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGG,GAAG,CAACL,MAAxB,EAAgCE,CAAC,EAAjC,EAAqC;AACnCD,IAAAA,CAAC,GAAIA,CAAC,GAAG,GAAL,GAAYI,GAAG,CAACF,UAAJ,CAAeD,CAAf,CAAhB;AACD;;AACDO,EAAAA,QAAQ,IAAIR,CAAZ;AACA,SAAOQ,QAAP;AACD","sourcesContent":["/*\n * Copyright (c) 2021 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * Hashing-related utility functions.\n */\n\n/**\n * Computes a hash of an array of strings (the order of strings does not matter).\n *\n * NOTE: An array with duplicate values given as parameter to this function\n *       may yield to a hash which would collide with other hashes computed\n *       on different arrays with this same function.\n *       Therefore is on behalf of the caller to be sure that \"array\" contains\n *       unique strings.\n *\n * @param {string[]} array An array of strings.\n * @return {number} A number representing the hash code of the array.\n */\nexport function stringHashArray(array) {\n  let code = 0;\n  for (let i = 0; i < array.length; i++) {\n    let n = 0;\n    for (let j = 0; j < array[i].length; j++) {\n      n = (n * 251) ^ array[i].charCodeAt(j);\n    }\n    code ^= n;\n  }\n  return code;\n}\n\n/**\n * Returns the hash of a string.\n *\n * @see https://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript#answer-7616484\n *\n * @param {string} str The string.\n * @return {number} The hash code of the string, represented as a number.\n */\nexport const hashString = str => {\n  let hash = 0,\n    i,\n    chr;\n  if (str.length === 0) {\n    return hash;\n  }\n  for (i = 0; i < str.length; i++) {\n    chr = str.charCodeAt(i);\n    hash = (hash << 5) - hash + chr;\n    hash |= 0; // Convert to 32 bit integer.\n  }\n  return hash;\n};\n\n/**\n * A one-pass algorithm to compute the hash of a series of unique strings incrementally.\n *\n * NOTE: Duplicate values given as parameter to this function\n *       may yield to a hash which would collide with other hashes computed\n *       on different string series with this same function.\n *       Therefore is on behalf of the caller to be sure that the series of strings will be unique\n *       while calling this function incrementally.\n *\n * @param {string} str The string.\n * @param {number} [hash] The previous hash computed with this same function if this call is the continuation\n *                        of the unique string series.\n * @return {number} The next hash.\n */\nexport function onePassStringHash(str, hash = 0) {\n  let nextHash = hash;\n  let n = 0;\n  for (let j = 0; j < str.length; j++) {\n    n = (n * 251) ^ str.charCodeAt(j);\n  }\n  nextHash ^= n;\n  return nextHash;\n}\n"],"file":"hash.js"}