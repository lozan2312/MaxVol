{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/*\n * Copyright (c) 2021 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\n\nimport allSupportedLocalesMap from \"./allSupportedLocalesMap\";\nimport { DEFAULT_FALLBACK_LOCALE } from \"../res/locales\";\n/**\n * @type {string}\n */\n\nconst NORMALIZED_LOCALE_DESIGNATORS_SEPARATOR = \"-\";\n/**\n * Normalizes a locale.\n *\n * @param {string} locale The locale.\n * @return {string} The normalized locale.\n */\n\nconst normalizeLocale = locale => locale.replace(\"_\", NORMALIZED_LOCALE_DESIGNATORS_SEPARATOR).toLowerCase();\n/**\n * Converts a string representing a locale to a Moment locale.\n *\n * This function reformats an incoming locale (e.g. \"ar_KW\" to \"ar-kw\")\n * checking if it's supported by Moment and falling back to language code only (e.g. \"ar\"),\n * then falling back to the Moment's default locale (USA's English, i.e. \"en\").\n *\n * @param {string|*} locale A string representing a locale. A value which is not a string may be passed and it will be normalized to an empty string\n *                          and the returned locale will be the Moment's default locale (USA's English, i.e. \"en\").\n * @return {Array} A tuple where the first element is a string containing the normalized\n *                 Moment locale for the given \"locale\" parameter and the second element\n *                 is a boolean indicating whether the locale is known or not\n *                 (if \"true\", the given locale is known and was looked up; if \"false\",\n *                 it means that the given locale was not looked up and is unknown).\n *                 When the given locale is unknown, the returned array will contain\n *                 the Moment's default locale as its first element (USA's English, i.e. \"en\").\n */\n\n\nexport default function toMomentLocale(locale) {\n  const normalizedLocale = normalizeLocale(typeof locale !== \"string\" ? \"\" : locale);\n  const defaultNormalizedLocale = DEFAULT_FALLBACK_LOCALE;\n  const localesToTry = [normalizedLocale, normalizedLocale.split(NORMALIZED_LOCALE_DESIGNATORS_SEPARATOR)[0]];\n\n  const allLocalesMap = _objectSpread(_objectSpread({}, allSupportedLocalesMap()), {}, {\n    // Using -1 as values here, but, really, any value which is not \"undefined\"\n    // would be OK in this case, because the value of the map is not used.\n    [defaultNormalizedLocale]: -1,\n    [defaultNormalizedLocale.split(NORMALIZED_LOCALE_DESIGNATORS_SEPARATOR)[0]]: -1\n  });\n\n  for (const localeToTry of localesToTry) {\n    if (typeof allLocalesMap[localeToTry] !== \"undefined\") {\n      return [localeToTry, true];\n    }\n  }\n\n  return [defaultNormalizedLocale, false];\n}","map":{"version":3,"sources":["../src/toMomentLocale.js"],"names":["NORMALIZED_LOCALE_DESIGNATORS_SEPARATOR","normalizeLocale","locale","normalizedLocale","defaultNormalizedLocale","localesToTry","allLocalesMap","allSupportedLocalesMap"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,OAAA,sBAAA,MAAA,0BAAA;AACA,SAAA,uBAAA,QAAA,gBAAA;AAEA;AACA;AACA;;AACA,MAAMA,uCAAuC,GAA7C,GAAA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,eAAe,GAAIC,MAAD,IACtBA,MAAM,CAANA,OAAAA,CAAAA,GAAAA,EAAAA,uCAAAA,EADF,WACEA,EADF;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAAA,cAAA,CAAA,MAAA,EAAgC;AAC7C,QAAMC,gBAAgB,GAAGF,eAAe,CACtC,OAAA,MAAA,KAAA,QAAA,GAAA,EAAA,GADF,MAAwC,CAAxC;AAGA,QAAMG,uBAAuB,GAA7B,uBAAA;AACA,QAAMC,YAAY,GAAG,CAAA,gBAAA,EAEnBF,gBAAgB,CAAhBA,KAAAA,CAAAA,uCAAAA,EAFF,CAEEA,CAFmB,CAArB;;AAIA,QAAMG,aAAa,GAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EACdC,sBADc,EAAA,CAAA,EAAA,EAAA,EAAA;AAEjB;AACA;AACA,KAAA,uBAAA,GAA2B,CAJV,CAAA;AAKjB,KAACH,uBAAuB,CAAvBA,KAAAA,CAAAA,uCAAAA,EAAD,CAACA,CAAD,GAEO,CAAC;AAPS,GAAA,CAAnB;;AASA,OAAK,MAAL,WAAA,IAAA,YAAA,EAAwC;AACtC,QAAI,OAAOE,aAAa,CAApB,WAAoB,CAApB,KAAJ,WAAA,EAAuD;AACrD,aAAO,CAAA,WAAA,EAAP,IAAO,CAAP;AACD;AACF;;AACD,SAAO,CAAA,uBAAA,EAAP,KAAO,CAAP;AACD","sourcesContent":["/*\n * Copyright (c) 2021 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport allSupportedLocalesMap from \"./allSupportedLocalesMap\";\nimport { DEFAULT_FALLBACK_LOCALE } from \"../res/locales\";\n\n/**\n * @type {string}\n */\nconst NORMALIZED_LOCALE_DESIGNATORS_SEPARATOR = \"-\";\n\n/**\n * Normalizes a locale.\n *\n * @param {string} locale The locale.\n * @return {string} The normalized locale.\n */\nconst normalizeLocale = (locale) =>\n  locale.replace(\"_\", NORMALIZED_LOCALE_DESIGNATORS_SEPARATOR).toLowerCase();\n\n/**\n * Converts a string representing a locale to a Moment locale.\n *\n * This function reformats an incoming locale (e.g. \"ar_KW\" to \"ar-kw\")\n * checking if it's supported by Moment and falling back to language code only (e.g. \"ar\"),\n * then falling back to the Moment's default locale (USA's English, i.e. \"en\").\n *\n * @param {string|*} locale A string representing a locale. A value which is not a string may be passed and it will be normalized to an empty string\n *                          and the returned locale will be the Moment's default locale (USA's English, i.e. \"en\").\n * @return {Array} A tuple where the first element is a string containing the normalized\n *                 Moment locale for the given \"locale\" parameter and the second element\n *                 is a boolean indicating whether the locale is known or not\n *                 (if \"true\", the given locale is known and was looked up; if \"false\",\n *                 it means that the given locale was not looked up and is unknown).\n *                 When the given locale is unknown, the returned array will contain\n *                 the Moment's default locale as its first element (USA's English, i.e. \"en\").\n */\nexport default function toMomentLocale(locale) {\n  const normalizedLocale = normalizeLocale(\n    typeof locale !== \"string\" ? \"\" : locale\n  );\n  const defaultNormalizedLocale = DEFAULT_FALLBACK_LOCALE;\n  const localesToTry = [\n    normalizedLocale,\n    normalizedLocale.split(NORMALIZED_LOCALE_DESIGNATORS_SEPARATOR)[0],\n  ];\n  const allLocalesMap = {\n    ...allSupportedLocalesMap(),\n    // Using -1 as values here, but, really, any value which is not \"undefined\"\n    // would be OK in this case, because the value of the map is not used.\n    [defaultNormalizedLocale]: -1,\n    [defaultNormalizedLocale.split(\n      NORMALIZED_LOCALE_DESIGNATORS_SEPARATOR\n    )[0]]: -1,\n  };\n  for (const localeToTry of localesToTry) {\n    if (typeof allLocalesMap[localeToTry] !== \"undefined\") {\n      return [localeToTry, true];\n    }\n  }\n  return [defaultNormalizedLocale, false];\n}\n"]},"metadata":{},"sourceType":"module"}