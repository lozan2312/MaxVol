{"version":3,"file":"index.es.js","sources":["../node_modules/regenerator-runtime/runtime.js","../node_modules/@babel/runtime/regenerator/index.js","../node_modules/@babel/runtime/helpers/asyncToGenerator.js","../node_modules/react-js-utl/hooks/useCallbackRef.js","../node_modules/js-utl/dist/es6/modules/core/index.js","../src/hooks/useLocale.js"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","module.exports = require(\"regenerator-runtime\");\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","/*\n * Copyright (c) 2020 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\nimport { useRef, useEffect } from \"react\";\n/**\n * Returns a ref for a callback.\n *\n * Useful e.g. when using callbacks within a callback of \"useEffect\" hook\n * which should not interfere with the deps array of the hook and yet having\n * a reference to the up-to-date callback within the \"useEffect\" hook's callback\n * through the \"current\" property.\n *\n * @see https://github.com/donavon/use-event-listener/issues/27\n *\n * @param {Function} callback A callback.\n * @return {Object} A ref for the given callback.\n *                  The returned ref could and should be passed as a dep to the dependencies array\n *                  of a hook using it because React guarantees that the returned object will persist\n *                  for the full lifetime of the component.\n * @return {Object.current} The up-to-date callback.\n */\n\nexport default function useCallbackRef(callback) {\n  var callbackRef = useRef(callback);\n  useEffect(function () {\n    callbackRef.current = callback;\n  }, [callback]);\n  return callbackRef;\n}\n//# sourceMappingURL=useCallbackRef.js.map","/*\n * Copyright (c) 2020 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\nimport { shallowEqual, objectPropEqual, is } from \"./compare\";\nexport { shallowEqual, objectPropEqual, is };\n/**\n * Core utility functions.\n */\n\n/**\n * Optional configuration with useful properties.\n *\n * @type {Object}\n */\n\nexport const config = {\n  uniqueIdPrefix: \"\",\n  elementUniqueIdPrefix: \"\",\n  checkNetworkURI: null\n};\n/**\n * Tests if an object is empty.\n *\n * @param {Object} obj The object to test.\n * @return {boolean} \"true\" if the given object is empty (does not have own properties), \"false\" otherwise.\n */\n\nexport function isObjectEmpty(obj) {\n  for (const prop in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, prop)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * @type {string}\n */\n\nconst objPrototypeToString = Object.prototype.toString.call({});\n/**\n * Tests if a variable is an object.\n *\n * @param {*} obj The variable to test.\n * @return {boolean} \"true\" if \"obj\" is indeed an object, \"false\" otherwise.\n */\n\nexport const isObject = function (obj) {\n  return objPrototypeToString === Object.prototype.toString.call(obj);\n};\n/**\n * Tests if a variable is a plain object (i.e. \"{}\", an object literal).\n *\n * @param {*} obj The variable to test.\n * @return {boolean} \"true\" if \"obj\" is a plain object, \"false\" otherwise.\n */\n\nexport const isPlainObject = obj => {\n  return obj !== null && typeof obj === \"object\" && obj.constructor === Object && isObject(obj);\n};\n/**\n * Tests to see whether something is an array or not.\n *\n * @param {*} something A variable to check whether it is an array or not.\n * @return {boolean} True if the parameter passed in is an array, false otherwise.\n */\n\nexport function isArray(something) {\n  return Object.prototype.toString.call(something) === Object.prototype.toString.call([]);\n}\n/**\n * Tests if the given value is callable.\n *\n * @param {*} v The value.\n * @return {boolean} True if callable, false otherwise.\n */\n\nexport function isCallable(v) {\n  return typeof v === \"function\";\n}\n/**\n * Tests if a variable is empty returning true for empty strings and empty arrays.\n *\n * @param {*} data The variable to test.\n * @return {boolean} True if the variable is empty, false otherwise.\n */\n\nexport function isEmpty(data) {\n  return !data || data.length === 0;\n}\n/**\n * Tests if a variable is empty or 0 (\"0\" string) returning true for empty strings,\n * empty arrays, the \"0\" string and empty values.\n *\n * @param {*} data The variable to test.\n * @return {boolean} True if the variable is empty or \"0\", false otherwise.\n */\n\nexport function isEmptyOr0(data) {\n  return !data || data === \"0\" || data.length === 0;\n}\n/**\n * Returns a reference to the global object.\n *\n * @return {Window|global} The global object (this function is cross-platform aware).\n */\n\nexport function getGlobalObject() {\n  return typeof global !== \"undefined\" ? global : window;\n}\n/**\n * @type {string}\n */\n\nconst JSUtlUniqueIdCounterProp = \"JSUtlUniqueIdCounterLEzKKl87QCDxwVH\";\n/**\n * Generates a unique ID which can be used as an \"id\" attribute.\n *\n * @param {string|undefined} [uniqueIdPrefix] Local unique ID prefix which overrides the prefix\n *                                            set on the \"config\" configuration object.\n * @return {string} The unique ID.\n */\n\nexport function uniqueId(uniqueIdPrefix = void 0) {\n  const globalObject = getGlobalObject();\n  globalObject[JSUtlUniqueIdCounterProp] = globalObject[JSUtlUniqueIdCounterProp] || 0;\n  globalObject[JSUtlUniqueIdCounterProp]++;\n  const uniqueIdCounter = globalObject[JSUtlUniqueIdCounterProp];\n  const uniqueId = (uniqueIdPrefix || config.uniqueIdPrefix) + uniqueIdCounter;\n  return uniqueId;\n}\n/**\n * Gets a nested value of an object given an array of nested property names (keys).\n *\n * @param {Object} data JS POJO object.\n * @param {Array} props Array of object nested keys.\n * @return {*} The leaf value.\n */\n\nexport function nestedPropertyValue(data, props) {\n  let root = data;\n\n  for (let i = 0; i < props.length; i++) {\n    const prop = props[i];\n    root = root[prop];\n  }\n\n  return root;\n}\n/**\n * Alias for \"nestedPropertyValue\".\n *\n * @alias\n */\n\nexport const getNestedPropertyValue = nestedPropertyValue;\n/**\n * Checks if a nested value of an object given an array of nested property names (keys) exists.\n *\n * @param {Object} data JS POJO object.\n * @param {Array} props Array of object nested keys.\n * @return {boolean} True if the nested key exists, false otherwise.\n */\n\nexport function hasNestedPropertyValue(data, props) {\n  if (!props.length) {\n    return false;\n  }\n\n  let root = data;\n\n  for (let i = 0; i < props.length; i++) {\n    const prop = props[i];\n\n    if (!root[prop]) {\n      return false;\n    }\n\n    root = root[prop];\n  }\n\n  return true;\n}\n/**\n * Sets a nested value of an object given an array of nested property names (keys).\n *\n * @param {Object} data JS POJO object.\n * @param {Array} props Array of object nested keys.\n * @param {*} value Leaf value.\n * @return {undefined}\n */\n\nexport function setNestedPropertyValue(data, props, value) {\n  if (!props.length) {\n    return;\n  }\n\n  let root = data;\n  let prev = null;\n\n  for (let i = 0; i < props.length; i++) {\n    const prop = props[i];\n\n    if (typeof root[prop] !== \"object\") {\n      root[prop] = {};\n    }\n\n    prev = root;\n    root = root[prop];\n  }\n\n  if (prev) {\n    prev[props[props.length - 1]] = value;\n  }\n}\n/**\n * Sets a nested value on a nested map.\n *\n * @param {Map|WeakMap} map A map or weak map.\n * @param {Array} keys Array of keys to traverse. Each key will lead to a nested map.\n * @param {*} value The value to set at the inner key.\n * @return {undefined}\n */\n\nexport const nestedMapSet = (map, keys, value) => {\n  let i = 0;\n  let current = map;\n\n  while (i < keys.length - 1) {\n    const key = keys[i];\n    const nested = current.get(key);\n\n    if (nested instanceof Map || nested instanceof WeakMap) {\n      current = nested;\n    } else {\n      const newMap = new Map();\n      current.set(key, newMap);\n      current = newMap;\n    }\n\n    i++;\n  }\n\n  current.set(keys[i], value);\n};\n/**\n * Tests if a map has the given nested keys.\n *\n * @param {Map|WeakMap} map A map or weak map.\n * @param {Array} keys Array of keys to check. Each key represents a nested map.\n * @return {boolean} \"true\" if all the nested keys exist, false otherwise.\n */\n\nexport const nestedMapHas = (map, keys) => {\n  let current = map;\n  let i = 0;\n  const l = keys.length;\n\n  while ((current instanceof Map || current instanceof WeakMap) && current.has(keys[i]) && i < l) {\n    current = current.get(keys[i]);\n    i++;\n  }\n\n  return i == l;\n};\n/**\n * Gets a value from a nested map.\n *\n * @param {Map|WeakMap} map A map or weak map.\n * @param {Array} keys Array of keys. Each key represents a nested map.\n * @return {*} The value of the map or \"undefined\" if there is no value for the given nested keys.\n */\n\nexport const nestedMapGet = (map, keys) => {\n  let current = map;\n  let i = 0;\n  const l = keys.length;\n\n  while ((current instanceof Map || current instanceof WeakMap) && current.has(keys[i]) && i < l) {\n    current = current.get(keys[i]);\n    i++;\n  }\n\n  return i == l ? current : void 0;\n};\n/**\n * @type {Symbol}\n */\n\nconst treeMapSubtree = Symbol(\"treeMapSubtree\");\n/**\n * Sets a nested value on a nested tree map.\n *\n * @param {Map|WeakMap} rootMap A map or weak map to use as the root.\n * @param {Array} keys Array of keys to traverse. Each key will lead to a nested node of the tree map.\n * @param {*} value The value to set at the inner nested key.\n * @return {undefined}\n */\n\nexport const nestedTreeMapSet = (rootMap, keys, value) => {\n  let i = 0;\n  let current = rootMap;\n  const MapConstructor = rootMap instanceof WeakMap ? WeakMap : Map;\n\n  while (i < keys.length - 1) {\n    const key = keys[i];\n    const nested = current.get(key);\n\n    if (nested) {\n      current = nested[treeMapSubtree] || (nested[treeMapSubtree] = new MapConstructor());\n    } else {\n      const newMap = new MapConstructor();\n      const node = {\n        [treeMapSubtree]: newMap,\n        value: void 0\n      };\n      current.set(key, node);\n      current = newMap;\n    }\n\n    i++;\n  }\n\n  const key = keys[i];\n  !current.has(key) ? current.set(key, {\n    value\n  }) : current.get(key).value = value;\n};\n/**\n * Tests if a tree map has the given nested keys.\n *\n * @param {Map|WeakMap} rootMap The root of the map or weak map.\n * @param {Array} keys Array of keys to check. Each key represents a nested node of the tree map.\n * @return {boolean} \"true\" if all the nested keys exist, false otherwise.\n */\n\nexport const nestedTreeMapHas = (rootMap, keys) => {\n  let current = rootMap;\n  let i = 0;\n  const l = keys.length;\n\n  while ((current instanceof Map || current instanceof WeakMap) && current.has(keys[i]) && i < l) {\n    current = current.get(keys[i])[treeMapSubtree];\n    i++;\n  }\n\n  return i == l;\n};\n/**\n * Gets a value from a nested tree map.\n *\n * @param {Map|WeakMap} rootMap The root of the map or weak map.\n * @param {Array} keys Array of keys. Each key represents a nested node of the tree map.\n * @return {*} The value of the tree map or \"undefined\" if there is no value for the given nested keys.\n */\n\nexport const nestedTreeMapGet = (rootMap, keys) => {\n  let current = rootMap;\n  let i = 0;\n  const lastIndex = keys.length - 1;\n\n  while ((current instanceof Map || current instanceof WeakMap) && current.has(keys[i]) && i < lastIndex) {\n    current = current.get(keys[i])[treeMapSubtree];\n    i++;\n  }\n\n  if (i === lastIndex && current) {\n    const lastKey = keys[i];\n\n    if (current.has(lastKey)) {\n      const nested = current.get(lastKey);\n      return nested.value;\n    }\n  }\n\n  return void 0;\n};\n/**\n * Yields values of an array mapping the yielded value.\n *\n * @generator\n * @param {Array} items An array of items.\n * @param {*} fn The function to call.\n *               The function will receive, in order the nth item,\n *               the index of the item in the array of items and the whole items array\n *               as parameters.\n * @param {*} thisArg Optional this arg of the called function (defaults to undefined).\n * @yields {*} The next yielded mapped item.\n */\n\nexport function* mapYield(items, fn, thisArg = void 0) {\n  items.map();\n  const boundFn = fn.bind(thisArg);\n\n  for (let i = 0; i < items.length; i++) {\n    yield boundFn(items[i], i, items);\n  }\n}\n/**\n * Compares two arrays deeply.\n *\n * @param {Array} arr1 First array.\n * @param {Array} arr2 Second array.\n * @return {boolean} True if they are equal (same indexes and same values), false otherwise.\n */\n\nexport function deepArrayCompare(arr1, arr2) {\n  if (arr1.length != arr2.length) {\n    return false;\n  }\n\n  const toString = Object.prototype.toString;\n  const arrayToStringStr = toString.call([]);\n\n  for (let i = 0; i < arr1.length; i++) {\n    if (!(i in arr2)) {\n      return false;\n    } else if (isPlainObject(arr1[i])) {\n      if (!isPlainObject(arr2[i]) || // eslint-disable-next-line @typescript-eslint/no-use-before-define\n      !deepObjectCompare(arr1[i], arr2[i])) {\n        return false;\n      }\n    } else if (arrayToStringStr === toString.call(arr1[i])) {\n      if (arrayToStringStr !== toString.call(arr2[i]) || !deepArrayCompare(arr1[i], arr2[i])) {\n        return false;\n      }\n    } else {\n      if (arr1[i] !== arr2[i]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n/**\n * Compare two objects deeply.\n *\n * @param {Object} obj1 First object.\n * @param {Object} obj2 Second object.\n * @return {boolean} True if they are equal (same properties and same values), false otherwise.\n */\n\nexport function deepObjectCompare(obj1, obj2) {\n  const toString = Object.prototype.toString;\n  const arrayToStringStr = toString.call([]);\n\n  for (const property in obj1) {\n    if (!(property in obj2)) {\n      // `obj2[property]` does not contain the property of `obj1`.\n      return false;\n    } else if (isPlainObject(obj1[property])) {\n      // `obj1[property]` is an object.\n      if (!isPlainObject(obj2[property]) || !deepObjectCompare(obj1[property], obj2[property])) {\n        // `obj2[property]` is not an object or the branches are different.\n        return false;\n      }\n    } else if (arrayToStringStr === toString.call(obj1[property])) {\n      // `obj1[property]` is an array.\n      if (arrayToStringStr !== toString.call(obj2[property]) || !deepArrayCompare(obj1[property], obj2[property])) {\n        // `obj2[property]` is not an array or the two objects are different.\n        return false;\n      }\n    } else {\n      // `obj1[property]` is not an object and is not an array.\n      if (obj1[property] !== obj2[property]) {\n        return false;\n      }\n    }\n  } // `obj1` equals `obj2` (has the same properties and the same values).\n\n\n  return true;\n}\n/**\n * Nests the properties of an object using an array of props definitions and defaults.\n * Returns the leaf.\n * Example:\n *\n *      var obj = {};\n *      var nest = [{a: {}}, {b: {}}, {c: {}}, {d: {}}, {e: {}}, {f: {}}, {g: {}}, {h: {}} ];\n *      var leaf = nestedObjectConstructValue(obj, nest);\n *      leaf.i = 'i';\n *      leaf.l = { m: \"m\" };\n *      JSON.stringify(obj); // {\"a\":{\"b\":{\"c\":{\"d\":{\"e\":{\"f\":{\"g\":{\"h\":{\"i\":\"i\",\"l\":{\"m\":\"m\"}}}}}}}}}}\n *      nest = nest.concat([ {n: {}}, {o: {}}, {p: {}} ]);\n *      var pLeaf = nestedObjectConstructValue(obj, nest);\n *      pLeaf.q = 'q';\n *      nest = nest.concat([ {q: {}} ]);\n *      nestedObjectConstructValue(obj, nest); // 'q'\n *\n * @param {Object} root The root object.\n * @param {Array} nestedPropsDef The nexted props definitions.\n * @param {boolean} [isRootArrayIfRootFalsy] True if the root should be an array if the first argument \"root\" is falsy.\n * @return {*} The leaf.\n */\n\nexport function nestedObjectConstructValue(root, nestedPropsDef, isRootArrayIfRootFalsy) {\n  root = root || (isRootArrayIfRootFalsy ? [] : {});\n  let leaf = root;\n\n  for (let i = 0; i < nestedPropsDef.length; i++) {\n    const propDef = nestedPropsDef[i];\n    const propKey = Object.keys(propDef)[0];\n    const propDefault = propDef[propKey];\n    leaf[propKey] = leaf[propKey] || propDefault;\n    leaf = leaf[propKey];\n  }\n\n  return leaf;\n}\n/**\n * Clones an object deeply using the JSON API.\n *\n * @param {Object} obj The object to clone.\n * @return {Object} The cloned object.\n */\n\nexport function cloneDeeplyJSON(obj) {\n  return JSON.parse(JSON.stringify(obj));\n}\n/**\n * Tests whether the given value is a reference type or not.\n *\n * @param {*} value Any value which can be an object or a primitive type.\n * @return {boolean} True if the given value is a reference type, false otherwise.\n */\n\nexport function isReferenceType(value) {\n  return new Object(value) === value;\n}\n/**\n * Tests whether the given value is a primitive type or not.\n *\n * @param {*} value Any value which can be an object or a primitive type.\n * @return {boolean} True if the given value is a primitive type, false otherwise.\n */\n\nexport function isPrimitiveType(value) {\n  return new Object(value) !== value;\n}\n/**\n * Checks whether an object has a cyclic reference or not.\n *\n * @param {Object} obj The object to check for a cyclic reference.\n * @return {boolean} True if the object has a cyclic reference, false otherwise.\n */\n\nexport function hasCyclicReference(obj) {\n  const stackSet = [];\n  let detected = false;\n\n  function detect(obj) {\n    if (detected) {\n      return;\n    }\n\n    if (typeof obj !== \"object\") {\n      return;\n    }\n\n    const indexOfObj = stackSet.indexOf(obj);\n\n    if (indexOfObj !== -1) {\n      detected = true;\n      return;\n    }\n\n    stackSet.push(obj);\n\n    for (const k in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, k)) {\n        detect(obj[k]);\n      }\n    }\n\n    stackSet.splice(indexOfObj, 1);\n    return;\n  }\n\n  detect(obj);\n  return detected;\n}\n/**\n * Converts a type to its string representation.\n *\n * @param {*} type A variable.\n * @return {string} The string representation of \"type\".\n */\n\nexport function typeToStr(type) {\n  return Object.prototype.toString.call(type);\n}\n/**\n * Clones an object deeply and returns the clone.\n *\n * @param {Object} object The object to clone.\n * @return {Object} The clone.\n * @throws {Error} If a circular reference if even only one property is of an unkown type\n *                 (this should never happen) or a circular reference is detected.\n */\n\nexport function cloneObjDeeply(object) {\n  const newObject = new object.constructor();\n\n  for (const prop in object) {\n    // If the property is defined on the prototype, ignore it. We don't want to assign it for each clone instance.\n    if (!Object.prototype.hasOwnProperty.call(object, prop)) {\n      continue;\n    }\n\n    const property = object[prop];\n\n    if (isPrimitiveType(property)) {\n      newObject[prop] = property;\n    } else if (isReferenceType(property)) {\n      if (!hasCyclicReference(property)) {\n        const clone = cloneObjDeeply(property);\n        newObject[prop] = clone;\n      } else {\n        throw new Error(\"Circular reference detected inside of property '\" + prop + \"' (\" + typeToStr(property) + \") in object (\" + typeToStr(object) + \")\");\n      }\n    } else {\n      throw new Error(\"Oops! Unknown type for property '\" + prop + \"' (\" + typeToStr(property) + \") in object (\" + typeToStr(object) + \")\");\n    }\n  }\n\n  return newObject;\n}\n/**\n * Deep object extension implementation.\n * Nothing is returned, but the destination object will be modified and merged with the source object\n * so that properties of the source object which are objects will recursively merge with the corresponding\n * destination property while the other properties with all the other types will replace the properties of the\n * destination object.\n * Note that this method should not be used for inheritance via the Prototypal Combination Inheritance pattern.\n * Also, this method doesn't perform a deep object cloning, it just extends the destinationObject by adding properties\n * it doesn't have in a deep way.\n *\n * @param {Object} destinationObject The destination object which will be modified and merged with the source object.\n * @param {Object} sourceObject The source object which will be used to extend the destination object.\n * @return {undefined}\n */\n\nexport function deepObjectExtend(destinationObject, sourceObject) {\n  for (const property in sourceObject) {\n    if (sourceObject[property] && isPlainObject(sourceObject[property])) {\n      destinationObject[property] = destinationObject[property] || {};\n      deepObjectExtend(destinationObject[property], sourceObject[property]);\n    } else {\n      destinationObject[property] = sourceObject[property];\n    }\n  }\n}\n/**\n * Deep object cloning extension implementation. If the source objects contain a property with a reference type, a clone object\n * of the same type of that property will be created and then merged with the property object of the destination object.\n *\n * @param {Object} destinationObject The destination object which will be modified and merged with the source object.\n * @param {...Object} sourceObject One or more objects which will be used to extend the destination object.\n * @return {undefined}\n */\n\nexport function deepObjectCloningExtend(...args) {\n  const destinationObject = args[0];\n  let sourceObject;\n\n  for (let i = 1; args[i]; i++) {\n    sourceObject = args[i];\n\n    for (const property in sourceObject) {\n      if (sourceObject[property] && isPlainObject(sourceObject[property])) {\n        destinationObject[property] = destinationObject[property] || {};\n        deepObjectExtend(destinationObject[property], cloneObjDeeply(sourceObject[property]));\n      } else {\n        destinationObject[property] = sourceObject[property];\n      }\n    }\n  }\n}\n/**\n * Extends a destination object with the provided source objects.\n *\n * @param {Object} destinationObj The destination object.\n * @param {...Object} sourceObjects The source objects.\n * @return {Object} The destination object \"destinationObj\" given as parameter after extension.\n */\n\nexport function extend(destinationObj, ...sourceObjects) {\n  for (const sourceObject of sourceObjects) {\n    deepObjectExtend(destinationObj, sourceObject);\n  }\n\n  return destinationObj;\n}\n/**\n * Extends a destination object with the provided source objects.\n *\n * @param {Object} destinationObject The destination object.\n * @param {...*} rest The source objects with the last parameter being an array of rules,\n *                    each rule being a tuple array where the first element is an array of \"ORed\" property names (strings or numbers)\n *                    or regexes matching property names for which the corresponding values should be decorated\n *                    (or a single property name or regex matching a property name if the decoration should only happen on a single property),\n *                    and where the second element is a callback to execute for each value which is a value of a property\n *                    of a source object.\n *                    The callback has the following signature:\n *\n *                        (value: *, prop: string|number, parent: Object) => *|undefined\n *\n *                    The callback will receive the final value after extension, its associated property and the parent object\n *                    where that property is set with that value.\n *                    Its returned value will be used as the final value of the property for that object in \"destinationObject\".\n * \n *                    If the last parameter is not an array of rules, it will be treated as the last source object to use for the extension\n *                    (the \"extend\" function will be simply called under the hood without any decoration logic).\n * @return {Object} The destination object \"destinationObj\" given as parameter after extension and, if the callback is given\n *                  as the last parameter, after applying the given callback.\n */\n\nexport function extendDecorate(destinationObject, ...rest) {\n  const rules = rest[rest.length - 1];\n\n  if (isArray(rules)) {\n    rest.pop();\n    const sourceObjects = rest;\n    const initialRetValue = {};\n    const matchedRulesMap = new Map();\n    const callbacksMap = new Map();\n    const paths = [];\n\n    const mapKeys = (destinationObject, sourceObject, currentStack, currentPath) => {\n      for (const key in sourceObject) {\n        currentStack.push({\n          destinationObject,\n          sourceObject,\n          property: key,\n          path: [...currentPath, key]\n        });\n      }\n    };\n\n    const matchRule = (rule, property) => {\n      if (rule instanceof RegExp && typeof property === \"string\") {\n        return property.match(rule);\n      } else {\n        return rule === property;\n      }\n    };\n\n    const matchArrayRule = (arrayRule, property) => {\n      for (const rule of arrayRule) {\n        if (matchRule(rule, property)) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    const ruleMatches = (rule, property) => {\n      if (isArray(rule)) {\n        return matchArrayRule(rule, property);\n      } else {\n        return matchRule(rule, property);\n      }\n    };\n\n    const matchRules = property => {\n      if (!matchedRulesMap.has(property)) {\n        const callbacks = [];\n\n        for (const [rule, callback] of rules) {\n          if (ruleMatches(rule, property)) {\n            callbacks.push(callback);\n          }\n        }\n\n        matchedRulesMap.set(property, callbacks);\n      }\n\n      return matchedRulesMap.get(property);\n    };\n\n    for (const sourceObject of sourceObjects) {\n      const currentStack = [];\n      const currentPath = [];\n      mapKeys(destinationObject, sourceObject, currentStack, currentPath);\n\n      while (currentStack.length) {\n        const {\n          destinationObject,\n          sourceObject,\n          property,\n          path: currentPath\n        } = currentStack.pop();\n\n        if (sourceObject[property] && isPlainObject(sourceObject[property])) {\n          // \"sourceObject[property]\" is an object of class \"Object\".\n          destinationObject[property] = isPlainObject(destinationObject[property]) ? destinationObject[property] : {};\n          mapKeys(destinationObject[property], sourceObject[property], currentStack, currentPath);\n        } else {\n          // \"sourceObject[property]\" is not an object.\n          destinationObject[property] = sourceObject[property];\n        }\n\n        const callbacks = matchRules(property);\n\n        if (callbacks && callbacks.length) {\n          if (!nestedTreeMapHas(callbacksMap, currentPath)) {\n            paths.push([...currentPath]);\n          }\n\n          nestedTreeMapSet(callbacksMap, currentPath, callbacks.map(callback => retValue => {\n            const value = retValue === initialRetValue ? destinationObject[property] : retValue;\n            return callback(value, property, destinationObject);\n          }));\n        }\n      }\n    } // Decorating the final nested values.\n\n\n    for (let i = paths.length - 1; i >= 0; i--) {\n      const path = paths[i];\n      const callbacks = nestedTreeMapGet(callbacksMap, path) || [];\n      let retValue = initialRetValue;\n\n      for (const callback of callbacks) {\n        retValue = callback(retValue);\n      }\n\n      if (retValue !== initialRetValue) {\n        setNestedPropertyValue(destinationObject, path, retValue);\n      }\n    }\n\n    return destinationObject;\n  } else {\n    return extend(destinationObject, ...rest);\n  }\n}\n/**\n * Like \"Array.prototype.includes\", but with type coercion.\n *\n * @param {Array} array The array.\n * @param {Anything} value The value.\n * @return {boolean} True if the value is included within the array (checking with type coercion`==`).\n */\n\nexport function includesTypeCoercion(array, value) {\n  for (const valueOfArray of array) {\n    if (valueOfArray == value) {\n      return true;\n    }\n  }\n\n  return false;\n}\n/**\n * Tests whether a value is undefined or not.\n *\n * @param {*} value A value\n * @return {boolean} True value is undefined, false otherwise.\n */\n\nexport function isUndefined(value) {\n  return typeof value === \"undefined\";\n}\n/**\n * Tests if the given value is an int.\n *\n * @param {*} value The value.\n * @return {boolean} True if value is an int, false otherwise.\n */\n\nexport function isInt(value) {\n  return Number.isInteger(value);\n}\n/**\n * Tests if the given string is an integer string.\n *\n * @param {*} a The string.\n * @return {boolean} True if the given string is an integer string, false otherwise.\n */\n\nexport function ctypeDigit(a) {\n  return Boolean(a.match(/^[0-9]+$/));\n}\n/**\n * Tests if the given value is an int or an integer string.\n *\n * @param {*} a The value.\n * @return {boolean} True if the value is an int or an integer string, false otherwise.\n */\n\nexport function isIntegerOrIntegerStr(a) {\n  return Number.isInteger(a) || ctypeDigit(a);\n}\n/**\n * Finds the index of a value in an array without type juggling\n * (i.e. like \"Array.prototype.indexOf\", but using \"==\" for equality comparison).\n *\n * @param {Array} array An array.\n * @param {*} value A value.\n * @return {number} -1 if the value is not in array, otherwise the index of value in array.\n */\n\nexport function findIndex(array, value) {\n  return array.findIndex(el => el == value);\n}\n/**\n * Returns the first value of the first property of an object.\n *\n * @param {Object} obj The object.\n * @return {*} The value of the first property of the given object.\n */\n\nexport function firstPropValue(obj) {\n  let prop;\n\n  for (prop in obj) {\n    break;\n  }\n\n  return obj[prop];\n}\n/**\n * Tests if a value is strictly a boolean \"true\".\n *\n * @param {*} value A value.\n * @return {boolean} \"true\" if the value is a boolean \"true\", \"false\" otherwise.\n */\n\nexport function isStrictlyTrue(value) {\n  return value === true;\n}\n/**\n * Tests if a value is truthy or not.\n *\n * @param {*} value The value.\n * @return {boolean} \"true\" if the value is truthy (evaluates to boolean \"true\"), \"false\" otherwise.\n */\n\nexport function isTruthy(value) {\n  return Boolean(value);\n}\n/**\n * Tests if all the given values are truthy.\n *\n * @param {...*} values The values.\n * @return {boolean} \"true\" if and only if all the values are truthy.\n */\n\nexport function allTruthy(...values) {\n  return values.every(isTruthy);\n}\n/**\n * Tests if all the given values are not undefined.\n *\n * @param {...*} values The values.\n * @return {boolean} \"true\" if and only if all the values are not undefined.\n */\n\nexport function allNotUndefined(...values) {\n  return values.every(value => typeof value !== \"undefined\");\n}\n/**\n * Tests if a string is a valid JSON string.\n *\n * @param {string} str A string.\n * @return {boolean} \"true\" if the string represents a valid JSON string, \"false\" otherwise.\n */\n\nexport function isJSONString(str) {\n  try {\n    JSON.parse(str);\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * No-op function.\n *\n * @return {undefined}\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-function\n\nexport function noOpFn() {}\n/**\n * Tests if a partial object is a subset of another object.\n *\n * @param {Object} obj An object.\n * @param {Object} partialObj A partial object which may not have all the keys of \"obj\"\n *                            or may even have different keys, or keys with different values.\n * @return {boolean} False if \"partialObj\" has a key which is not in \"obj\",\n *                   or has at least one key which is also in \"obj\" but with a different value\n *                   (shallow comparison), true otherwise.\n */\n\nexport function partialShallowEqual(obj, partialObj) {\n  return shallowEqual(Object.keys(partialObj).reduce((carry, key) => {\n    carry[key] = obj[key];\n    return carry;\n  }, {}), partialObj);\n}\n/**\n * Returns a shallow object diff, returning an object with two keys \"objA\" and \"objB\",\n * each containing an object with all the properties of one of the two objects which are not within\n * the other object, respectively.\n * If a property is on both objects but each object has a different value for that same property\n * (using shallow equality comparison), the returned property will be set on both objects with their\n * respective values.\n *\n * @param {Object} objA First object.\n * @param {Object} objB Second object.\n * @return {Object} An object containing the shallow diff, with two keys \"objA\" and \"objB\".\n */\n\nexport function shallowObjectDiff(objA, objB) {\n  const diff = {\n    objA: {},\n    objB: {}\n  };\n\n  if (shallowEqual(objA, objB)) {\n    return diff;\n  }\n\n  const keysA = Object.keys(objA);\n  const keysB = Object.keys(objB);\n\n  for (let i = 0; i < keysA.length; i++) {\n    const prop = keysA[i];\n\n    if (!objectPropEqual(objA, objB, prop)) {\n      diff.objA[prop] = objA[prop];\n\n      if (hasOwnProperty.call(objB, prop)) {\n        diff.objB[prop] = objB[prop];\n      }\n    }\n  }\n\n  for (let i = 0; i < keysB.length; i++) {\n    const prop = keysB[i];\n\n    if (!objectPropEqual(objB, objA, prop)) {\n      diff.objB[prop] = objB[prop];\n\n      if (hasOwnProperty.call(objA, prop)) {\n        diff.objA[prop] = objA[prop];\n      }\n    }\n  }\n\n  return diff;\n}\n/**\n * Casts a value to a string.\n *\n * @param {*} v A value.\n * @return {string} The string representation of the value.\n */\n\nexport function str(v) {\n  return \"\" + v;\n}\n/**\n * Maps an object, executing a function on each of its properties\n * returning a new mapped object.\n *\n * @param {Object} obj The object to map.\n * @param {Function} fn The function to use for the mapping.\n * @return {Object} The new mapped object.\n */\n\nexport const mapObject = (obj, fn) => Object.fromEntries(Object.entries(obj).map(([key, value], index) => [key, fn(value, key, index)]));\n/**\n * Selects the truthy properties of an object or the properties of an object\n * passing a test specified with a callback function.\n *\n * @param {Object} obj The input object.\n * @param {Function} fn A function which will receive two parameters:\n *\n *                          - value: The current value of the input object for a given property;\n *                          - prop: The name of the current property of the input object.\n *\n *                      The function will have to return a boolean \"true\" indicating that this value\n *                      and property has to be included in the returned object, or \"false\" otherwise.\n *\n * @return {Object} An object having only the properties which passed the test\n *                  implemented by the \"fn\" callback function.\n */\n\nexport const propSelection = (obj, fn = isTruthy) => Object.keys(obj).reduce((carry, key) => {\n  if (fn(obj[key], key)) {\n    carry[key] = obj[key];\n  }\n\n  return carry;\n}, {});\n//# sourceMappingURL=index.js.map","/*\n * Copyright (c) 2021 Anton Bagdatyev (Tonix)\n *\n * Permission is hereby granted, free of charge, to any person\n * obtaining a copy of this software and associated documentation\n * files (the \"Software\"), to deal in the Software without\n * restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the\n * Software is furnished to do so, subject to the following\n * conditions:\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\n * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n * OTHER DEALINGS IN THE SOFTWARE.\n */\n\nimport { useEffect } from \"react\";\nimport { useCallbackRef } from \"react-js-utl/hooks\";\nimport { importLocale } from \"moment-utl\";\n\n/**\n * Hook to use an asynchronously loaded moment locale.\n *\n * @param {string|*} locale The locale to load. Check out the \"moment/locale/\" directory in \"node_modules\"\n *                          for builtin available locales.\n *                          If a value which is not a string is passed as parameter, it will be treated as an unknown locale\n *                          and the \"obj.callback\" callback will be executed with a \"normalizedLocale\" parameter\n *                          set to the Moment's default locale (USA's English, i.e. \"en\").\n * @param {Object} obj An object with further parameters.\n * @param {(locale: string) => *} obj.callback The callback to execute once the locale has been loaded.\n *                                             Note that the callback will be re-executed only\n *                                             when the given locale parameter changes from the previous one.\n * @param {undefined|(normalizedLocale: string, locale: string) => *} [unknownLocaleCallback] A callback called with the Moment's default locale (USA's English, i.e. \"en\")\n *                                                                                            if the given locale is unknown as its first parameter and the given locale as the second parameter.\n *                                                                                            See the \"unknownLocaleCallback\" parameter of the \"importLocale\" function of the \"moment-utl\" package.\n * @param {undefined|(e: Error, locale: string) => *} [obj.errorCallback] An optional callback to execute when the locale\n *                                                                        cannot be loaded (e.g. Moment locale chunk file not found or network error).\n * @return {undefined}\n */\nexport default function useLocale(\n  locale,\n  { callback, unknownLocaleCallback = void 0, errorCallback = void 0 }\n) {\n  const callbackRef = useCallbackRef(callback);\n  const unknownLocaleCallbackRef = useCallbackRef(unknownLocaleCallback);\n  const errorCallbackRef = useCallbackRef(errorCallback);\n  useEffect(() => {\n    (async () => {\n      try {\n        const normalizedLocale = await importLocale(\n          locale,\n          unknownLocaleCallbackRef.current\n        );\n        callbackRef.current(normalizedLocale);\n      } catch (e) {\n        const errorCallbackIsFunction =\n          typeof errorCallbackRef.current === \"function\";\n\n        /**\n         * @see https://overreacted.io/how-does-the-development-mode-work/\n         */\n        if (process.env.NODE_ENV !== \"production\") {\n          if (!errorCallbackIsFunction) {\n            // eslint-disable-next-line no-console\n            console.error(\n              `react-moment-hooks - useLocale hook - An error was thrown and an error callback was not provided: ${e}`\n            );\n          }\n        }\n        errorCallbackIsFunction && errorCallbackRef.current(e, locale);\n      }\n    })();\n  }, [locale, callbackRef, unknownLocaleCallbackRef, errorCallbackRef]);\n}\n"],"names":["undefined","require$$0","useLocale","locale","callback","unknownLocaleCallback","errorCallback","callbackRef","useCallbackRef","unknownLocaleCallbackRef","errorCallbackRef","useEffect","importLocale","current","normalizedLocale","errorCallbackIsFunction","process","env","NODE_ENV","console","error"],"mappings":"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"}